@using StackExchange.Opserver.Data.Elastic
@using StackExchange.Opserver.Views.Elastic
@model DashboardModel.CurrentData
@{
    Layout = null;
    var c = Model.Cluster;
    var i = Model.IndexName;
    var shards = (Model.WarningsOnly ? c.TroubledShards : c.ShardStates).Where(s => i == null || s.Index == i).ToList();
}
@helper GetNodeName(string node, Dictionary<string, ElasticCluster.NodeInfoWrap> nodes)
{
    if (node.IsNullOrEmpty())
    {
        <span class="unknown">n/a</span>
        return;
    }
    ElasticCluster.NodeInfoWrap result;
    if (nodes.TryGetValue(node, out result))
    {
        if (result.Name == Model.NodeName)
        {
            <b>@result.Name</b>
        }
        else
        {
            @result.Name
        }
        return;
    }
    <span class="unknown">@node</span>
}
@try
{
    if (shards.Any() && c.Nodes.Data != null)
    {
        var nodes = c.Nodes.Data.Nodes.ToDictionary(n => n.GUID);
        var status = shards.Select(s => s.GetMonitorStatus()).GetWorstStatus();
        <table class="cluster-dashboard striped-dashboard">
            <tbody class="node-header" data-name="header-shards-@c.HealthStatus.Data.Name">
                <tr class="category-row">
                    <th colspan="9"><h3>@status.IconSpan() @shards.Count.ToComma() Shards @(Model.WarningsOnly ? "in trouble" : "") on @c.HealthStatus.Data.TotalNodeCount.Pluralize("node") (@c.HealthStatus.Data.Name)</h3></th>
                </tr>
                <tr>
                    <th></th>
                    <th>Index</th>
                    <th>State</th>
                    <th>Shard #</th>
                    <th>Primary</th>
                    <th>Node</th>
                    <th>Relocating To</th>
                </tr>
            </tbody>
            <tbody class="node-group" data-name="shards-@c.HealthStatus.Data.Name">
                @foreach (var s in shards.OrderByWorst(s => s.GetMonitorStatus()).ThenBy(s => { int j; return int.TryParse(s.Index, out j) ? j : 0; }).ThenBy(s => s.Shard).ThenByDescending(s => s.Primary))
                {
                    <tr class="@s.GetMonitorStatus().RowClass()">
                        <td>@s.GetMonitorStatus().IconSpan()</td>
                        <td>@c.GetIndexAliasedName(s.Index)</td>
                        <td>@s.GetPrettyState()</td>
                        <td>@s.Shard</td>
                        <td>@s.Primary</td>
                        <td>@GetNodeName(s.Node, nodes)</td>
                        <td>@GetNodeName(s.RelocatingNode, nodes)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
catch (Exception e)
{
    Current.LogException(e);
    <div class="no-content">Error showing index shards @(i != null ? "for " + i : ""): @e.Message</div>
}